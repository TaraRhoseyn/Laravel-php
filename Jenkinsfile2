pipeline {
     agent {
        docker {
            image 'docker:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'  // Mount Docker socket for Docker-in-Docker
        }
    }
	
    environment {
		DOCKERHUB_CREDENTIALS=credentials('Docker_Hub')
	}
  stages {
        stage('Setup PHP and PHPUnit') {
            steps {
                echo "Installing PHP 8 and PHPUnit"

                // Update and install PHP 8 and Composer on the docker:dind environment
                sh '''
                    apk update
                    apk add --no-cache php8 php8-cli php8-phar php8-json php8-openssl php8-pdo php8-pdo_mysql php8-mbstring php8-dom php8-tokenizer php8-xml php8-ctype php8-session curl

                    # Install Composer
                    curl -sS https://getcomposer.org/installer | php8 -- --install-dir=/usr/local/bin --filename=composer

                    # Install PHPUnit via Composer
                    composer global require phpunit/phpunit --prefer-dist

                    # Add Composer's global bin directory to PATH
                    export PATH="$PATH:/root/.composer/vendor/bin"

                    # Verify installations
                    php -v
                    phpunit --version
                '''
            }
        }
    stages {
        stage('Docker Login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('Build & push Dockerfile') {
            steps {
                  sh '''
		       
		        docker stop laravel-container || true
		        docker rm laravel-container || true
		        docker rmi bassam2080/laravel-php || true
		        docker build -t bassam2080/laravel-php .
                        docker compose up -d
		        docker push bassam2080/laravel-php
		        '''
            }
        }
	      //sh '''
		      //  docker compose down
	               // docker stop laravel-container || true
		       // docker rm laravel-container || true
		      //  docker rmi bassam2080/laravel-php || true
		     //   
                             
		//        '''

 stage('Test Database Connection') {
            steps {
                echo "Stage: Test Database Connection"
               sh 'php -v'
              sh 'phpunit --version'
                sh 'vendor/bin/phpunit --filter DbConnectionTest'  // Run only DbConnectionTest
            }
        }

        stage('Clean') {
            steps {
             echo "hi"
	    sh  'docker compose down'
            }
        }
    }
}
